{"version":3,"sources":["components/Clock/index.jsx","components/Header/index.jsx","components/CountKitty/index.jsx","components/MirrorBar/index.jsx","components/Input/index.jsx","components/SubmitButton/index.jsx","components/Form/index.jsx","components/Footer/index.jsx","App.js","serviceWorker.js","index.js"],"names":["Clock","React","useState","Date","date","setDate","useEffect","timerID","setInterval","tick","clearInterval","id","toLocaleTimeString","Header","CountKitty","count","setCount","onMouseOver","src","alt","width","height","MirrorBar","type","userInfo","displayInfo","onChange","event","target","value","console","log","Input","label","required","htmlFor","charAt","toUpperCase","slice","SubmitButton","props","Form","registered","setStatus","userName","setUserName","frameBorder","title","className","allowFullScreen","onSubmit","preventDefault","Footer","theTime","getFullYear","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kXAuBeA,EApBD,WAAO,IAAD,EACMC,IAAMC,SAAS,IAAIC,MADzB,mBACXC,EADW,KACLC,EADK,KAGlBJ,IAAMK,WAAU,WACd,IAAMC,EAAUC,aAAY,kBAAMC,MAAQ,KAC1C,OAAO,WACLC,cAAcH,OAIlB,IAAME,EAAO,WACXJ,EAAQ,IAAIF,OAGd,OACE,yBAAKQ,GAAG,SAASP,EAAKQ,qBAAtB,MCLWC,G,MATA,WACb,OACE,oCACE,wBAAIF,GAAG,YAAP,oBACA,wBAAIA,GAAG,SAAP,eAA2B,kBAAC,EAAD,UCSlBG,G,MAdI,WAAO,IAAD,EACGb,IAAMC,SAAS,GADlB,mBAChBa,EADgB,KACTC,EADS,KAEvB,OACE,oCACE,uBAAGL,GAAG,UAAN,yBACA,4BAAQM,YAAa,kBAAMD,EAASD,EAAQ,KAAI,yBAAKG,IAAI,0BACvDC,IAAI,aAAaC,MAAM,MAAMC,OAAO,UAC3B,IAAVN,GACC,uBAAGJ,GAAG,QAAN,uCAAkDI,EAAlD,6BCQOO,G,MAfG,SAAC,GAAgB,IAAfC,EAAc,EAAdA,KAAMZ,EAAQ,EAARA,GAAQ,EACAV,IAAMC,SAAS,IADf,mBACzBsB,EADyB,KACfC,EADe,KAMhC,OACE,oCACE,uBAAGd,GAAG,UAAN,oDACA,2BAAOY,KAAMA,EAAMZ,GAAIA,EAAIe,SAPX,SAACC,GACnBF,EAAYE,EAAMC,OAAOC,OACzBC,QAAQC,IAAIJ,EAAMC,OAAOC,UAMvB,uBAAGlB,GAAG,SAASa,MCHNQ,G,MATD,SAAC,GAA2C,IAA1CC,EAAyC,EAAzCA,MAAOtB,EAAkC,EAAlCA,GAAIY,EAA8B,EAA9BA,KAAMW,EAAwB,EAAxBA,SAAUR,EAAc,EAAdA,SACvC,OACI,oCACI,2BAAOS,QAASF,GAAQA,EAAMG,OAAO,GAAGC,cAAgBJ,EAAMK,MAAM,GAApE,MACA,2BAAO3B,GAAIA,EAAIY,KAAMA,EAAMW,SAAUA,EAAUR,SAAUA,OCOtDa,G,MAVM,SAACC,GAClB,OACI,4BAAQ7B,GAAI6B,EAAM7B,GAAIsB,MAAOO,EAAMP,MAAOV,KAAK,UAC1CiB,EAAMP,MAAMG,OAAO,GAAGC,cAAgBG,EAAMP,MAAMK,MAAM,MC0CtDG,EA3CF,SAAC,GAAU,IAAT9B,EAAQ,EAARA,GAAQ,EACaV,IAAMC,UAAS,GAD5B,mBACZwC,EADY,KACAC,EADA,OAEa1C,IAAMC,SAAS,IAF5B,mBAEZ0C,EAFY,KAEFC,EAFE,KAanB,OACI,oCACMH,EAaE,yBAAK/B,GAAG,eACJ,yCAAeiC,EAAf,0FACA,4BAAQ1B,IAAI,6CAA6CE,MAAM,MAAMC,OAAO,OAAOyB,YAAY,IAAIC,MAAM,WAAWC,UAAU,cAAcC,iBAAe,KAd/J,oCACI,uBAAGtC,GAAG,aAAN,wCACA,0BAAMuC,SAVD,SAACvB,GAClBA,EAAMwB,iBACNR,GAAU,IAQgChC,GAAIA,GAC9B,6BAAK,kBAAC,EAAD,CAAOA,GAAG,OAAOY,KAAK,OAAOU,MAAM,OAAOC,SAAS,WAAWR,SAfnE,SAACC,GACjBkB,EAAYlB,EAAMC,OAAOC,UAeL,kBAAC,EAAD,CAAOlB,GAAG,QAAQY,KAAK,QAAQU,MAAM,QAAQC,SAAS,aACtD,kBAAC,EAAD,CAAOvB,GAAG,WAAWY,KAAK,WAAWU,MAAM,WAAWC,SAAS,aAFnE,KAGA,iCAAM,kBAAC,EAAD,CAAOvB,GAAG,aAAaY,KAAK,OAAOU,MAAM,qBAC3C,kBAAC,EAAD,CAAOtB,GAAG,cAAcY,KAAK,SAASU,MAAM,kBAChD,kBAAC,EAAD,CAActB,GAAG,SAASsB,MAAM,eCfzCmB,G,MAVA,WACX,IAEMC,GAAU,IAAIlD,MAAOmD,cAC3B,OACI,uBAAG3C,GAAG,UAAN,kBAHa,WAGb,OAJiB,WAIjB,KAAwD0C,EAAxD,aCgBOE,MAjBf,WAEE,OACE,yBAAKP,UAAU,OACb,kBAAC,EAAD,MAEA,kBAAC,EAAD,MAEA,kBAAC,EAAD,CAAWzB,KAAK,OAAOZ,GAAG,SAE1B,kBAAC,EAAD,CAAMA,GAAG,aAET,kBAAC,EAAD,QCRc6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.a369c46c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Clock = () => {\r\n  const [date, setDate] = React.useState(new Date());\r\n\r\n  React.useEffect(() => {\r\n    const timerID = setInterval(() => tick(), 1000);\r\n    return function clear() {\r\n      clearInterval(timerID);\r\n    };\r\n  });\r\n\r\n  const tick = () => {\r\n    setDate(new Date());\r\n  }\r\n\r\n  return (\r\n    <div id=\"clock\">{date.toLocaleTimeString()} </div>\r\n  );\r\n}\r\n\r\n\r\nexport default Clock;","import React from 'react';\r\nimport Clock from '../Clock';\r\nimport './Header.css';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <>\r\n      <h1 id=\"greeting\">Good day to you.</h1>\r\n      <h2 id=\"clock\">The time is <Clock /></h2>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport './CountKitty.css'\r\n\r\nconst CountKitty = () => {\r\n  const [count, setCount] = React.useState(0);\r\n  return (\r\n    <>\r\n      <p id=\"stroke\">Stroke the cute kitty</p>\r\n      <button onMouseOver={() => setCount(count + 1)}><img src='https://cutt.ly/hynsz44'\r\n        alt=\"cute kitty\" width=\"120\" height=\"91.5\" /></button>\r\n      {count !== 0 &&\r\n        <p id=\"spam\">You have now consented to receiving {count} spam emails every day</p>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CountKitty;\r\n\r\n/*\r\n  {count > 0 ?\r\n        <p id=\"spam\">You have now consented to receiving {count} spam emails every day</p>\r\n        : null\r\n      }\r\n\r\n      */","\r\nimport React from 'react';\r\nimport './MirrorBar.css';\r\n\r\nconst MirrorBar = ({type, id}) => {\r\n  const [userInfo, displayInfo] = React.useState('');\r\n  const handleInput = (event) => {\r\n    displayInfo(event.target.value)\r\n    console.log(event.target.value)\r\n  }\r\n  return (\r\n    <>\r\n      <p id=\"typein\">Type in the box below and I'll repeat after you.</p>\r\n      <input type={type} id={id} onChange={handleInput} />\r\n      <p id=\"reply\">{userInfo}</p>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MirrorBar;","import React from 'react';\r\n\r\nconst Input = ({label, id, type, required, onChange}) => {\r\n    return (\r\n        <>\r\n            <label htmlFor={label}>{label.charAt(0).toUpperCase() + label.slice(1)}: </label>\r\n            <input id={id} type={type} required={required} onChange={onChange}></input>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Input;","import React from 'react';\r\nimport './SubmitButton.css';\r\n\r\nconst SubmitButton = (props) => {\r\n    return (\r\n        <button id={props.id} label={props.label} type=\"submit\">\r\n            {props.label.charAt(0).toUpperCase() + props.label.slice(1)}\r\n        </button>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default SubmitButton;","import React from 'react';\r\nimport './Form.css';\r\nimport Input from '../Input'\r\nimport SubmitButton from '../SubmitButton';\r\n\r\nconst Form = ({id}) => {\r\n    const [registered, setStatus] = React.useState(false);\r\n    const [userName, setUserName] = React.useState('');\r\n\r\n    const handleInput = (event) => {\r\n        setUserName(event.target.value);\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        setStatus(true);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {!registered ?\r\n                <>\r\n                    <p id=\"reginvite\">Register for more of this crap here:</p>\r\n                    <form onSubmit={handleSubmit} id={id}>\r\n                        <div><Input id=\"name\" type=\"text\" label=\"name\" required=\"required\" onChange={handleInput} />\r\n                            <Input id=\"email\" type=\"email\" label=\"email\" required=\"required\" />\r\n                            <Input id=\"password\" type=\"password\" label=\"password\" required=\"required\" /> </div>\r\n                        <div> <Input id=\"favecolour\" type=\"text\" label=\"favourite colour\" />\r\n                            <Input id=\"luckynumber\" type=\"number\" label=\"lucky number\" /></div>\r\n                        <SubmitButton id=\"submit\" label=\"submit\" />\r\n                    </form >\r\n                </>\r\n                :\r\n                <div id=\"conditional\">\r\n                    <p>Thank you, {userName}, for sending me your data. I will now sell it for large amounts of money ü§£</p>\r\n                    <iframe src=\"https://giphy.com/embed/3orif7aLUehOfdmlXy\" width=\"120\" height=\"91.5\" frameBorder=\"0\" title=\"Mr Burns\" className=\"giphy-embed\" allowFullScreen></iframe>\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default Form;","import React from 'react';\r\nimport './Footer.css';\r\n\r\n\r\nconst Footer = () => {\r\n    const devSignature = \"Lizzie C\";\r\n    const location = \"Sydenham\";\r\n    const theTime = new Date().getFullYear();\r\n    return (\r\n        <p id=\"footer\">‚òô Made in {location} by {devSignature}, {theTime} ‚ùß</p>\r\n    )\r\n}\r\n\r\n\r\nexport default Footer;","import React from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header';\r\nimport CountKitty from './components/CountKitty';\r\nimport MirrorBar from './components/MirrorBar';\r\nimport Form from './components/Form';\r\nimport Footer from './components/Footer';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Header />\r\n\r\n      <CountKitty />\r\n\r\n      <MirrorBar type=\"text\" id=\"info\" />\r\n\r\n      <Form id=\"reg_form\" />\r\n\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}